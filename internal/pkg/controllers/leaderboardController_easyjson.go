// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package controllers

import (
	json "encoding/json"
	user "github.com/go-park-mail-ru/2019_1_5factorial-team/internal/pkg/user"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson23a8a5c3DecodeGithubComGoParkMailRu201915factorialTeamInternalPkgControllers(in *jlexer.Lexer, out *GetLeaderboardResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scores":
			if in.IsNull() {
				in.Skip()
				out.Scores = nil
			} else {
				in.Delim('[')
				if out.Scores == nil {
					if !in.IsDelim(']') {
						out.Scores = make([]user.Scores, 0, 2)
					} else {
						out.Scores = []user.Scores{}
					}
				} else {
					out.Scores = (out.Scores)[:0]
				}
				for !in.IsDelim(']') {
					var v1 user.Scores
					(v1).UnmarshalEasyJSON(in)
					out.Scores = append(out.Scores, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson23a8a5c3EncodeGithubComGoParkMailRu201915factorialTeamInternalPkgControllers(out *jwriter.Writer, in GetLeaderboardResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"scores\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Scores == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Scores {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetLeaderboardResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson23a8a5c3EncodeGithubComGoParkMailRu201915factorialTeamInternalPkgControllers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetLeaderboardResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson23a8a5c3EncodeGithubComGoParkMailRu201915factorialTeamInternalPkgControllers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetLeaderboardResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson23a8a5c3DecodeGithubComGoParkMailRu201915factorialTeamInternalPkgControllers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetLeaderboardResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson23a8a5c3DecodeGithubComGoParkMailRu201915factorialTeamInternalPkgControllers(l, v)
}
